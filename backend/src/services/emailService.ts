import { Resend } from 'resend';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Resend —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
const resend = process.env.RESEND_API_KEY ? new Resend(process.env.RESEND_API_KEY) : null;

interface TeamRegistrationWithQuiz {
  id: string;
  teamName: string;
  teamSize: number;
  captainFirstName: string;
  captainLastName: string;
  captainEmail: string;
  captainPhone: string;
  status: string;
  quiz: {
    title: string;
    description: string | null;
    date: Date;
    startTime: string;
    location: string | null;
    price: number;
    minTeamSize: number;
    maxTeamSize: number;
  };
}

// Email templates for team registration
const getTeamConfirmationEmailHTML = (registration: TeamRegistrationWithQuiz) => {
  const { teamName, teamSize, captainFirstName, captainLastName, quiz } = registration;
  const quizDate = new Date(quiz.date).toLocaleDateString('ru-RU', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const isWaitlist = registration.status === 'WAITLIST';

  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #4F46E5; color: white; padding: 20px; border-radius: 8px 8px 0 0; }
            .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }
            .team-details { background: white; padding: 15px; border-radius: 8px; margin: 15px 0; }
            .status { padding: 10px; border-radius: 5px; margin: 15px 0; text-align: center; }
            .confirmed { background: #D1FAE5; color: #065F46; }
            .waitlist { background: #FEF3C7; color: #92400E; }
            .footer { color: #666; font-size: 14px; margin-top: 20px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üèÜ –ë–æ—Å—ãBoss</h1>
                <h2>${isWaitlist ? '–ö–æ–º–∞–Ω–¥–∞ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!'}</h2>
            </div>
            
            <div class="content">
                <p>–ü—Ä–∏–≤–µ—Ç, ${captainFirstName} ${captainLastName}!</p>
                
                <div class="status ${isWaitlist ? 'waitlist' : 'confirmed'}">
                    ${isWaitlist 
                      ? 'üìã –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –µ—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ.'
                      : '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!'
                    }
                </div>

                <div class="team-details">
                    <h3>üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ:</h3>
                    <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</strong> ${teamName}</p>
                    <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> ${teamSize} —á–µ–ª–æ–≤–µ–∫</p>
                    <p><strong>–ö–∞–ø–∏—Ç–∞–Ω:</strong> ${captainFirstName} ${captainLastName}</p>
                </div>

                <div class="team-details">
                    <h3>üìù –î–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</h3>
                    <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${quiz.title}</p>
                    ${quiz.description ? `<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${quiz.description}</p>` : ''}
                    <p><strong>–î–∞—Ç–∞:</strong> ${quizDate}</p>
                    <p><strong>–í—Ä–µ–º—è:</strong> ${quiz.startTime}</p>
                    ${quiz.location ? `<p><strong>–ú–µ—Å—Ç–æ:</strong> ${quiz.location}</p>` : ''}
                    <p><strong>–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:</strong> –æ—Ç ${quiz.minTeamSize} –¥–æ ${quiz.maxTeamSize} —á–µ–ª–æ–≤–µ–∫</p>
                    ${quiz.price > 0 ? `<p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${quiz.price} BYN</p>` : '<p><strong>–£—á–∞—Å—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ</strong></p>'}
                </div>

                ${!isWaitlist ? `
                    <h3>üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
                    <ul>
                        <li>–ü—Ä–∏–≤–æ–¥–∏—Ç–µ –≤—Å—é –∫–æ–º–∞–Ω–¥—É –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞</li>
                        <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–Ω–∞—é—Ç –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ</li>
                        <li>–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</li>
                        <li>–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π —Ä—É—á–∫–∏ –¥–ª—è –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã</li>
                    </ul>
                ` : ''}

                <div class="footer">
                    <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –ë–æ—Å—ãBoss</p>
                    <p><small>ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registration.id}</small></p>
                </div>
            </div>
        </div>
    </body>
    </html>
  `;
};

export const sendTeamConfirmationEmail = async (registration: TeamRegistrationWithQuiz) => {
  try {

    // === –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
    console.log('üîß === DEBUG EMAIL SERVICE ===');
    console.log('üîë RESEND_API_KEY:', process.env.RESEND_API_KEY ? `–Ω–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: ${process.env.RESEND_API_KEY.length})` : '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢');
    console.log('üìß FROM_EMAIL:', process.env.FROM_EMAIL);
    console.log('üì¨ TO EMAIL:', registration.captainEmail);
    console.log('ü§ñ resend –æ–±—ä–µ–∫—Ç:', resend ? '—Å–æ–∑–¥–∞–Ω' : '‚ùå –ù–ï –°–û–ó–î–ê–ù');
    console.log('=====================================');
    // === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ Resend...');
    
    if (!resend) {
      console.error('Resend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç RESEND_API_KEY');
      throw new Error('Email service not configured');
    }

    const isWaitlist = registration.status === 'WAITLIST';
    
    const result = await resend.emails.send({
      from: process.env.FROM_EMAIL || 'restardigital@gmail.com',
      to: registration.captainEmail,
      subject: isWaitlist 
        ? `üìã –ö–æ–º–∞–Ω–¥–∞ "${registration.teamName}" –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è: ${registration.quiz.title}`
        : `‚úÖ –ö–æ–º–∞–Ω–¥–∞ "${registration.teamName}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${registration.quiz.title}`,
      html: getTeamConfirmationEmailHTML(registration)
    });

    console.log('Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    throw error;
  }
};

export const sendTeamReminderEmail = async (registration: TeamRegistrationWithQuiz) => {
  try {
    if (!resend) {
      throw new Error('Email service not configured');
    }

    const quizDate = new Date(registration.quiz.date).toLocaleDateString('ru-RU');
    
    const result = await resend.emails.send({
      from: process.env.FROM_EMAIL || 'restardigital@gmail.com',
      to: registration.captainEmail,
      subject: `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—É—Ä–Ω–∏—Ä –∑–∞–≤—Ç—Ä–∞!`,
      html: `
        <h2>–ü—Ä–∏–≤–µ—Ç, ${registration.captainFirstName}!</h2>
        <p>–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ ${quizDate} –≤ ${registration.quiz.startTime} —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Ç—É—Ä–Ω–∏—Ä "${registration.quiz.title}".</p>
        <p>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å—é –∫–æ–º–∞–Ω–¥—É "${registration.teamName}" (${registration.teamSize} —á–µ–ª–æ–≤–µ–∫)!</p>
        <p>–î–æ –≤—Å—Ç—Ä–µ—á–∏!</p>
        <p><strong>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –ë–æ—Å—ãBoss</strong></p>
      `
    });

    return result;
  } catch (error) {
    console.error('Error sending team reminder:', error);
    throw error;
  }
};